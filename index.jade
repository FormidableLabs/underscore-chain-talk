extends layout

block slides
  section.slide#title
    h1 Underscore Chain
      .subtitle A Formidable Labs tech talk

  section.slide#introduction
    :markdown
      ## Underscore Chain

      [Underscore](http://underscorejs.org/) is a library we use everyday.

      Today, we'll look at the enormously useful
      [`chain`](http://underscorejs.org/#chain) method.

  section.slide#familiar
    :markdown
      ## Familiar Underscore Methods

      We can take all the methods we normally use:

      * `filter`
      * `object`
      * `keys`
      * `map`
      * `first`

      ... and chain them!

  section.slide#basic
    :markdown
      ## Basic Chains

    textarea.code#code(name="code", mode="javascript", runnable="true", style="display: none;").
      var arr = [1, 2, 3],
        double = function (x) { return 2 * x; },

        // Single. map.
        map1 = _.map(arr, double),

        // Converted to a chain.
        map2 = _.chain(arr).map(double).value();

      console.log("maps: ", map1, map2);
    //-

  section.slide#complex
    :markdown
      ## A Little More Complex

    textarea.code#code(name="code", mode="javascript", runnable="true", style="display: none;").
      var ret = _.chain(["bug", "foo", "bar", "baz"])
        .filter(function (val) { return /^b/.test(val); })
        .sortBy(function (val) { return val; })
        .map(function (val) { return val.toUpperCase(); })
        .value()

      console.log("results: ", ret);
    //-

  section.slide#objects
    :markdown
      ## Objects

    textarea.code#code(name="code", mode="javascript", runnable="true", style="display: none;").
      var ret = _.chain({ foo: "a", bar: "b", baz: "c" })
        .map(function (v, k) { return [k, v]; })
        .filter(function (p) { return p[1] !== "c"; })
        .object()
        .value()

      console.log("results: ", ret);
    //-

  section.slide#next
    :markdown
      ## Thanks!

      [http://underscorejs.org/#chain](http://underscorejs.org/#chain)
